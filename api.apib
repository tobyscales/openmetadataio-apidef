FORMAT: 1A
# OpenMetadataIO
OpenMetadataIO is a REST-based API enabling permissioned access to versioned metadata in a heterogeneous media supply chain. 
The purpose of OMIO is to create a common source of truth for metadata across production, pre-production and post-production workflows; 
today those workflows consist of disconnected ISV solutions reading and writing metadata to their own proprietary datastores, often
requiring elaborate export/import and validation procedures to ensure integrity of metadata from one step to the next.

OpenMetadataIO seeks to solve this problem by offering a unified API for accessing metadata across all of these applications.

Below is the draft specification for the OpenMetadataIO API. 

# Group Metadata Definitions
Access, update and create metadata definitions using standard JSON syntax. Optionally import an OpenAssetIO (traitgen)-compliant YML file and generate the JSON schema from that.

## Metadata schema creation [/metadata/create]
All actions related to creating metadata schemas.

### Create new metadata schema from URL [POST]
This action creates a new metadata schema. It takes a public URL and creates a schema based on the JSON objects defined there.

+ schema_url (string) - A publicly-accessible URL for a [JSON-schema](https://json-schema.org/specification) definition file.

+ Request (application/json)

            {
                "schema_url": "https://github.com/MovieLabs/Prodtech-OMC-Data-Model/blob/dev/JSON-Schema/omc/omc-v2.0.schema.json",
            }
+ Response 201 (application/json)
    {
                "name": "omc-schema",
                "version": "2023-10-05",
                "updated": "true"
    }

### Create new metadata schema from JSON object [POST]
This action creates a new metadata schema. It takes a JSON object containing the required field "uniqueid" and creates a JSON schema based on this object.

+ schema_def (string) - A [JSON-schema](https://json-schema.org/specification) definition, submitted as a string.

+ Request (application/json)

            {
                "name": "string",
                "version": "XXXX-XX-XX",
                "context": "string",
                "assets": "string"
            }
+ Response 201 (application/json)
    {
                "name": "my-cool-schema",
                "version": "2023-10-05",
                "updated": "true"
    }

### Create new metadata schema from [Traitgen](https://openassetio/)-compatible traits.yml file [POST]

+ schema_def (string) - TODO
+ Request (application/json)
     {
        "TODO": "string"
    }
 + Response 201 (application/json)
    {
        "TODO": "string"
    }
 
## Metadata schema patching [/metadata/update]
All actions related to updating metadata schemas.
### TODO

## Metadata schema removal [/metadata/delete]
All actions related to updating metadata schemas.
### TODO

# Group Metadata Retrieval

